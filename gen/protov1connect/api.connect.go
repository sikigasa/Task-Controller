// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api.proto

package protov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/bufbuild/buf-examples/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "proto.v1.TaskService"
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "proto.v1.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceCreateTaskProcedure is the fully-qualified name of the TaskService's CreateTask RPC.
	TaskServiceCreateTaskProcedure = "/proto.v1.TaskService/CreateTask"
	// TaskServiceGetTaskProcedure is the fully-qualified name of the TaskService's GetTask RPC.
	TaskServiceGetTaskProcedure = "/proto.v1.TaskService/GetTask"
	// TaskServiceListTaskProcedure is the fully-qualified name of the TaskService's ListTask RPC.
	TaskServiceListTaskProcedure = "/proto.v1.TaskService/ListTask"
	// TaskServiceUpdateTaskProcedure is the fully-qualified name of the TaskService's UpdateTask RPC.
	TaskServiceUpdateTaskProcedure = "/proto.v1.TaskService/UpdateTask"
	// TaskServiceDeleteTaskProcedure is the fully-qualified name of the TaskService's DeleteTask RPC.
	TaskServiceDeleteTaskProcedure = "/proto.v1.TaskService/DeleteTask"
	// TagServiceCreateTagProcedure is the fully-qualified name of the TagService's CreateTag RPC.
	TagServiceCreateTagProcedure = "/proto.v1.TagService/CreateTag"
	// TagServiceListTagProcedure is the fully-qualified name of the TagService's ListTag RPC.
	TagServiceListTagProcedure = "/proto.v1.TagService/ListTag"
	// TagServiceDeleteTagProcedure is the fully-qualified name of the TagService's DeleteTag RPC.
	TagServiceDeleteTagProcedure = "/proto.v1.TagService/DeleteTag"
)

// TaskServiceClient is a client for the proto.v1.TaskService service.
type TaskServiceClient interface {
	// Create a new task.
	CreateTask(context.Context, *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error)
	// Read a task by ID.
	GetTask(context.Context, *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error)
	// List all tasks optional limit and offset.
	ListTask(context.Context, *connect.Request[gen.ListTaskRequest]) (*connect.Response[gen.ListTaskResponse], error)
	// Update an existing task.
	UpdateTask(context.Context, *connect.Request[gen.UpdateTaskRequest]) (*connect.Response[gen.UpdateTaskResponse], error)
	// Delete a task by ID.
	DeleteTask(context.Context, *connect.Request[gen.DeleteTaskRequest]) (*connect.Response[gen.DeleteTaskResponse], error)
}

// NewTaskServiceClient constructs a client for the proto.v1.TaskService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	taskServiceMethods := gen.File_api_proto.Services().ByName("TaskService").Methods()
	return &taskServiceClient{
		createTask: connect.NewClient[gen.CreateTaskRequest, gen.CreateTaskResponse](
			httpClient,
			baseURL+TaskServiceCreateTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[gen.GetTaskRequest, gen.GetTaskResponse](
			httpClient,
			baseURL+TaskServiceGetTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("GetTask")),
			connect.WithClientOptions(opts...),
		),
		listTask: connect.NewClient[gen.ListTaskRequest, gen.ListTaskResponse](
			httpClient,
			baseURL+TaskServiceListTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("ListTask")),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[gen.UpdateTaskRequest, gen.UpdateTaskResponse](
			httpClient,
			baseURL+TaskServiceUpdateTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("UpdateTask")),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[gen.DeleteTaskRequest, gen.DeleteTaskResponse](
			httpClient,
			baseURL+TaskServiceDeleteTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("DeleteTask")),
			connect.WithClientOptions(opts...),
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	createTask *connect.Client[gen.CreateTaskRequest, gen.CreateTaskResponse]
	getTask    *connect.Client[gen.GetTaskRequest, gen.GetTaskResponse]
	listTask   *connect.Client[gen.ListTaskRequest, gen.ListTaskResponse]
	updateTask *connect.Client[gen.UpdateTaskRequest, gen.UpdateTaskResponse]
	deleteTask *connect.Client[gen.DeleteTaskRequest, gen.DeleteTaskResponse]
}

// CreateTask calls proto.v1.TaskService.CreateTask.
func (c *taskServiceClient) CreateTask(ctx context.Context, req *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls proto.v1.TaskService.GetTask.
func (c *taskServiceClient) GetTask(ctx context.Context, req *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// ListTask calls proto.v1.TaskService.ListTask.
func (c *taskServiceClient) ListTask(ctx context.Context, req *connect.Request[gen.ListTaskRequest]) (*connect.Response[gen.ListTaskResponse], error) {
	return c.listTask.CallUnary(ctx, req)
}

// UpdateTask calls proto.v1.TaskService.UpdateTask.
func (c *taskServiceClient) UpdateTask(ctx context.Context, req *connect.Request[gen.UpdateTaskRequest]) (*connect.Response[gen.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls proto.v1.TaskService.DeleteTask.
func (c *taskServiceClient) DeleteTask(ctx context.Context, req *connect.Request[gen.DeleteTaskRequest]) (*connect.Response[gen.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the proto.v1.TaskService service.
type TaskServiceHandler interface {
	// Create a new task.
	CreateTask(context.Context, *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error)
	// Read a task by ID.
	GetTask(context.Context, *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error)
	// List all tasks optional limit and offset.
	ListTask(context.Context, *connect.Request[gen.ListTaskRequest]) (*connect.Response[gen.ListTaskResponse], error)
	// Update an existing task.
	UpdateTask(context.Context, *connect.Request[gen.UpdateTaskRequest]) (*connect.Response[gen.UpdateTaskResponse], error)
	// Delete a task by ID.
	DeleteTask(context.Context, *connect.Request[gen.DeleteTaskRequest]) (*connect.Response[gen.DeleteTaskResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceMethods := gen.File_api_proto.Services().ByName("TaskService").Methods()
	taskServiceCreateTaskHandler := connect.NewUnaryHandler(
		TaskServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(taskServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceGetTaskHandler := connect.NewUnaryHandler(
		TaskServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(taskServiceMethods.ByName("GetTask")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceListTaskHandler := connect.NewUnaryHandler(
		TaskServiceListTaskProcedure,
		svc.ListTask,
		connect.WithSchema(taskServiceMethods.ByName("ListTask")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceUpdateTaskHandler := connect.NewUnaryHandler(
		TaskServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(taskServiceMethods.ByName("UpdateTask")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TaskServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(taskServiceMethods.ByName("DeleteTask")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceCreateTaskProcedure:
			taskServiceCreateTaskHandler.ServeHTTP(w, r)
		case TaskServiceGetTaskProcedure:
			taskServiceGetTaskHandler.ServeHTTP(w, r)
		case TaskServiceListTaskProcedure:
			taskServiceListTaskHandler.ServeHTTP(w, r)
		case TaskServiceUpdateTaskProcedure:
			taskServiceUpdateTaskHandler.ServeHTTP(w, r)
		case TaskServiceDeleteTaskProcedure:
			taskServiceDeleteTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) CreateTask(context.Context, *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TaskService.CreateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) GetTask(context.Context, *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TaskService.GetTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) ListTask(context.Context, *connect.Request[gen.ListTaskRequest]) (*connect.Response[gen.ListTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TaskService.ListTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) UpdateTask(context.Context, *connect.Request[gen.UpdateTaskRequest]) (*connect.Response[gen.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TaskService.UpdateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) DeleteTask(context.Context, *connect.Request[gen.DeleteTaskRequest]) (*connect.Response[gen.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TaskService.DeleteTask is not implemented"))
}

// TagServiceClient is a client for the proto.v1.TagService service.
type TagServiceClient interface {
	// Create a new tag.
	CreateTag(context.Context, *connect.Request[gen.CreateTagRequest]) (*connect.Response[gen.CreateTagResponse], error)
	// List all tags optional limit and offset.
	ListTag(context.Context, *connect.Request[gen.ListTagRequest]) (*connect.Response[gen.ListTagResponse], error)
	// Delete a tag by ID.
	DeleteTag(context.Context, *connect.Request[gen.DeleteTagRequest]) (*connect.Response[gen.DeleteTagResponse], error)
}

// NewTagServiceClient constructs a client for the proto.v1.TagService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagServiceMethods := gen.File_api_proto.Services().ByName("TagService").Methods()
	return &tagServiceClient{
		createTag: connect.NewClient[gen.CreateTagRequest, gen.CreateTagResponse](
			httpClient,
			baseURL+TagServiceCreateTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
			connect.WithClientOptions(opts...),
		),
		listTag: connect.NewClient[gen.ListTagRequest, gen.ListTagResponse](
			httpClient,
			baseURL+TagServiceListTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("ListTag")),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[gen.DeleteTagRequest, gen.DeleteTagResponse](
			httpClient,
			baseURL+TagServiceDeleteTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("DeleteTag")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	createTag *connect.Client[gen.CreateTagRequest, gen.CreateTagResponse]
	listTag   *connect.Client[gen.ListTagRequest, gen.ListTagResponse]
	deleteTag *connect.Client[gen.DeleteTagRequest, gen.DeleteTagResponse]
}

// CreateTag calls proto.v1.TagService.CreateTag.
func (c *tagServiceClient) CreateTag(ctx context.Context, req *connect.Request[gen.CreateTagRequest]) (*connect.Response[gen.CreateTagResponse], error) {
	return c.createTag.CallUnary(ctx, req)
}

// ListTag calls proto.v1.TagService.ListTag.
func (c *tagServiceClient) ListTag(ctx context.Context, req *connect.Request[gen.ListTagRequest]) (*connect.Response[gen.ListTagResponse], error) {
	return c.listTag.CallUnary(ctx, req)
}

// DeleteTag calls proto.v1.TagService.DeleteTag.
func (c *tagServiceClient) DeleteTag(ctx context.Context, req *connect.Request[gen.DeleteTagRequest]) (*connect.Response[gen.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the proto.v1.TagService service.
type TagServiceHandler interface {
	// Create a new tag.
	CreateTag(context.Context, *connect.Request[gen.CreateTagRequest]) (*connect.Response[gen.CreateTagResponse], error)
	// List all tags optional limit and offset.
	ListTag(context.Context, *connect.Request[gen.ListTagRequest]) (*connect.Response[gen.ListTagResponse], error)
	// Delete a tag by ID.
	DeleteTag(context.Context, *connect.Request[gen.DeleteTagRequest]) (*connect.Response[gen.DeleteTagResponse], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceMethods := gen.File_api_proto.Services().ByName("TagService").Methods()
	tagServiceCreateTagHandler := connect.NewUnaryHandler(
		TagServiceCreateTagProcedure,
		svc.CreateTag,
		connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceListTagHandler := connect.NewUnaryHandler(
		TagServiceListTagProcedure,
		svc.ListTag,
		connect.WithSchema(tagServiceMethods.ByName("ListTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceDeleteTagHandler := connect.NewUnaryHandler(
		TagServiceDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(tagServiceMethods.ByName("DeleteTag")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceCreateTagProcedure:
			tagServiceCreateTagHandler.ServeHTTP(w, r)
		case TagServiceListTagProcedure:
			tagServiceListTagHandler.ServeHTTP(w, r)
		case TagServiceDeleteTagProcedure:
			tagServiceDeleteTagHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) CreateTag(context.Context, *connect.Request[gen.CreateTagRequest]) (*connect.Response[gen.CreateTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TagService.CreateTag is not implemented"))
}

func (UnimplementedTagServiceHandler) ListTag(context.Context, *connect.Request[gen.ListTagRequest]) (*connect.Response[gen.ListTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TagService.ListTag is not implemented"))
}

func (UnimplementedTagServiceHandler) DeleteTag(context.Context, *connect.Request[gen.DeleteTagRequest]) (*connect.Response[gen.DeleteTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.TagService.DeleteTag is not implemented"))
}
